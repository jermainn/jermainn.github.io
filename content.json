[{"title":"Unity3D_IslandSurvival 案例开发","slug":"Unity3D-IslandSurvival-案例开发","date":"2023-12-10T08:40:58.000Z","updated":"2023-12-10T08:40:58.000Z","comments":true,"path":"p/7cfb.html","link":"","permalink":"http://jermainn.gitee.io/p/7cfb.html","excerpt":"","text":"案例界面采用了旧港口的场景 针对主角主视角，主要设计有相机视角跟随、鼠标控制视角运动、按键控制主角移动、简单的攻击效果和攻击音效。配置界面UI，分别显示生命值、得分值和子弹数量。 子弹攻击效果和主角游戏结束分别如下： 主角生命为0后，游戏结束。画面中释放了鼠标，中间部分显示“GAME OVER”，并提供“TRY AGAIN”按键重新开始。针对敌人，实现了自动寻路，始终向着主角运动，并通过状态控制，在追踪、攻击、死亡等状态进行切换。下面展示简单游戏动图。 GitHub：jermainn/Unity3D: Unity3D案例开发 (github.com) 下载地址： ​ github：Release 测试 · jermainn/Unity3D (github.com) ​ 百度网盘：链接：https://pan.baidu.com/s/16e0VTI-ueueOr3JRBx_sbw?pwd=6iij 提取码：6iij 当前案例尚存在较多问题，需要接下来对其进行进一步修整优化","categories":[],"tags":[{"name":"Unity3D","slug":"Unity3D","permalink":"http://jermainn.gitee.io/tags/Unity3D/"}]},{"title":"成都游玩(备份)","slug":"成都游玩-备份","date":"2023-10-01T17:26:12.000Z","updated":"2023-10-01T17:26:12.000Z","comments":true,"path":"p/548b.html","link":"","permalink":"http://jermainn.gitee.io/p/548b.html","excerpt":"","text":"点击文字查看相应图片 春熙路&amp;太古里 空港体育公园成都花展 双子塔 人山人海","categories":[],"tags":[]},{"title":"启用 wordpress 博客","slug":"启用-wordpress-博客","date":"2023-02-13T03:32:02.000Z","updated":"2023-02-13T03:32:02.000Z","comments":true,"path":"p/6cc8.html","link":"","permalink":"http://jermainn.gitee.io/p/6cc8.html","excerpt":"0 说明个人博客说明","text":"0 说明个人博客说明 1 Wordpress 博客启用Wordpress 博客地址：http://jermain.eu.org/ Hexo 博客地址：https://jermainliu.github.io/ 在之后的博客中，将会尽量在两个博客中同步更新","categories":[],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"http://jermainn.gitee.io/tags/wordpress/"}]},{"title":"当傅里叶拿起画笔","slug":"傅里叶画笔","date":"2023-01-21T06:16:22.711Z","updated":"2023-01-21T06:16:22.711Z","comments":true,"path":"p/8719.html","link":"","permalink":"http://jermainn.gitee.io/p/8719.html","excerpt":"0 说明希望大家都有所收获，能手执傅里叶画笔，写了这篇文稿，由于时间和精力有限采用文本形式 个人对傅里叶级数展开的绘图与原理的简单理解，希望能有所收获 文稿写的可能不够完善，比较粗糙，欢迎批评指正","text":"0 说明希望大家都有所收获，能手执傅里叶画笔，写了这篇文稿，由于时间和精力有限采用文本形式 个人对傅里叶级数展开的绘图与原理的简单理解，希望能有所收获 文稿写的可能不够完善，比较粗糙，欢迎批评指正 拜读了 3Blue1Brown 和 [OUTDATED] ManimCairo tutorial - Fourier Scene - YouTube 视频相关大佬给出的相关程序，是基于 ManimCairo，我对其进行了简单的适配，适配到社区版的 ManimCE 原程序： https://pastebin.com/eeQ4mbLj https://gitlab.com/zavden/manim-backup/-/raw/master/fourier.py svg文件：music_svg - Google 云端硬盘 适配后的程序(含原程序)： https://github.com/JermainLiu/Manim_Fourier 链接到： 当傅里叶拿起画笔——manim_fourier 程序分享、、、_哔哩哔哩_bilibili 兔年到，manim画个兔_哔哩哔哩_bilibili 1 傅里叶级数展开1.1 狄利赫里条件对于周期信号： (1) 在一个周期内，如果有间断点，则间断点的数目应该为有限个； (2) 在一个周期内，极大值和极小值的数目应是有限个； (3) 在一个周期内，信号是绝对可积的。 1.2 傅里叶级数展开满足狄利赫里条件的周期函数可以展开成傅里叶级数形式 对于有限区间（时域有限）函数（信号）可以通过周期延拓得到周期函数，展开为傅里叶级数 周期为$T_1$函数 $f(t)$展开成傅里叶级数指数形式，如下 \\begin{align} f(t) & = \\sum_{n=-\\infty}^{\\infty} {F_n e^{jnw_1t}} \\quad 其中 \\, w_1 = \\frac{2\\pi}{T_1} \\, 为基波频率 \\\\ & = \\sum_{n=-\\infty}^{\\infty} {F_n e^{jw_nt}} \\quad 其中 \\, w_n =nw_1 为 \\, n 次谐波频率 \\end{align}傅里叶级数系数 $F_n$ 计算公式： F_n = \\frac{1}{T_1} \\int_{T_1}{f(t)e^{-jw_n t}} \\, {\\rm d}t当 $T_1 = 1 $ 时， \\left\\{ \\begin{array}{c} f(t) = \\sum_{n=-\\infty}^{\\infty} {F_n e^{jn2\\pi t}} \\\\ F_n = \\int_{0}^{1}{f(t)e^{-jn2\\pi t}} \\, {\\rm d}t \\end{array} \\right. 2 复数系引入当我们把一个矢量图像放到直角坐标系中，点 $(x,y)$ 的轨迹显然无法写出显性函数 $y=f(x) $ 然而我们可以想象一下，我们自己描图的时候怎样进行的，定义第一笔为时刻 $t = 0$，笔尖落在了开头位置，随着时刻的变化，笔尖的位置不断变化，最终在 $t=1$ 时笔尖落地到轨迹的末端，于是我们得到一个映射 t \\overset{\\quad f \\quad }{\\to} (x_t, y_t) \\quad t \\in [0,1]也即点的位置是 $t$ 的一元函数，那么我们需要一种方式来表达点的位置关系，于是我们引入复数系来解决这个问题 通过下列欧拉公式将点的直角坐标与复数坐标联系 x(t)+jy(t) = r(t)e^{j\\theta(t)} = r(t)\\cdot\\cos(\\theta(t))+jr(t)\\cdot\\sin(\\theta(t))其中 r(t) \\, 表示点到原点的距离，\\theta(t) \\, 表示该点的向量与实轴的夹角于是我们有了复数函数 f(t) = r(t)e^{j\\theta(t)} \\quad t \\in [0,1]那么我们将 $f(t)$ 进行周期 $T_1=1$ 延拓，便可将 $f(t)$ 展开成傅里叶级数，可求得傅里叶级数系数 $F_n$ \\begin{align} f(t) & = \\sum_{n=-\\infty}^{\\infty} {F_n e^{jn\\pi t}} \\\\ & = \\cdots + F_{-n}e^{-jw_nt} + \\cdots + F_{-2}e^{-jw_2t}+F_{-1}e^{-jw_1t}+ F_0 + F_{1}e^{jw_1t} + F_{2}e^{jw_2t} + \\cdots + F_{n}e^{jw_nt} + \\cdots \\end{align}我们分别看各个分量的情况，以 $n=2, \\; F_2e^{jw_2t}$为例 F_2e^{jw_2t} = re^{j\\theta}e^{jw_2t}=re^{j(\\theta + w_2t)}其中傅里叶级数的系数 $F_2=re^{j\\theta}$ 为一个复数的定值，$e^{jw_2t}$ 只改变整体的相位，而不改变幅度，于是随着 $t$ 的连续变化，整体向量将会绕着自身的起点进行旋转 两个向量相加，三个相加，四个相加……相当于将向量进行首位依次相接 而把 $n=0$ 作为第一个向量，其相位始终为0，故是固定不动的 3 傅里叶展开系数的求解在之前我们已经介绍了傅里叶级数展开系数为 F_n = \\int_{0}^{1}{f(t)e^{-jw_n t}} \\, {\\rm d}t \\quad 当 T_1 = 1时定积分定义，函数在区间 $[0,1]$ 上的积分为 \\int_{0}^{1}{h(t)} \\, {\\rm d}t = \\lim_{m\\to \\infty}{\\sum_{i=0}^{m-1}{h(\\frac{i}{m}) \\, \\frac{1}{m}}}故 \\begin{align} F_n & = \\lim_{m\\to \\infty}{\\sum_{i=0}^{m-1}{f(\\frac{i}{m}) \\; e^{-jw_n \\frac{i}{m}} \\, \\frac{1}{m}}} \\\\ & \\approx \\sum_{i=0}^{m-1}{f(\\frac{i}{m}) \\; e^{-jw_n \\frac{i}{m}} \\, \\frac{1}{m}} \\\\ & = \\sum_{i=0}^{m-1}{f(i\\Delta{t}) \\; e^{-jw_n\\Delta{t} } \\, }\\quad 其中\\, \\Delta{t}=\\frac{1}{m} \\end{align}取 $m=10000$ ，对 $f(t)$ 在 $t\\in [0,1]$ 进行均匀采样取值，根据上式进行计算近似得到 $F_n$ ，我们取有限次谐波频率，带入到傅里叶级数展开式中得到 $f(t)$ 的近似值 4 程序中一些参数当 $T_1 = 1 $ 时， \\left\\{ \\begin{array}{c} f(t) = \\sum_{n=-\\infty}^{\\infty} {F_n e^{jn2\\pi t}} \\\\ F_n = \\int_{0}^{1}{f(t)e^{-jn2\\pi t}} \\, {\\rm d}t \\end{array} \\right.n_vectors：取谐波频率的个数，决定傅里叶级数中的 $n$ ，取 $n\\in [\\frac{-n_vectors}{2}, \\frac{n_vectors}{2}]$ 的整数 slow_factor：速度因子，决定绘制一周的时间为 $\\frac{1}{slow_factor}$ start_drawn：是否需要提前绘制好路径 interpolate_config：默认值为 $[0,1]$ ，设置当前傅里叶画笔点与之前路径线的粗细比例，渐变设置 n_cycles 、 run_time：均用于设置运行的时间，分别表示 绘制图像的周数和运行时间，其默认值分别为 None 和 10 ，在适配的程序中，设置了 n_cycles 取较高的优先级，同时设置时，采用 n_cycles wait_before_start：绘制前的等待时间 center_point：设置绘图的向量第一个向量的起点位置","categories":[],"tags":[{"name":"manim","slug":"manim","permalink":"http://jermainn.gitee.io/tags/manim/"},{"name":"傅里叶级数","slug":"傅里叶级数","permalink":"http://jermainn.gitee.io/tags/%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0/"}]},{"title":"node.js版本管理工具nvm","slug":"node-js版本管理工具nvm","date":"2021-03-21T08:48:14.000Z","updated":"2021-03-21T08:48:14.000Z","comments":true,"path":"p/36897.html","link":"","permalink":"http://jermainn.gitee.io/p/36897.html","excerpt":"","text":"0 说明 在搭建hexo博客的时候需要使用node.js，但是有时候会出现安装的版本与使用的主题中有的插件不匹配，进行版本变更的时候很不方便，那么使用版本管理工具就会比较的方便。 nvm全名是node.js version management，是node.js的管理工具，可以在github上进行下载：https://github.com/coreybutler/nvm-windows/releases 1 管理node.js 安装过程就不再详细说明，只要注意安装的时候会出现两次选择目录的选项，第一次出现nvm安装目录，第二次是你用nvm工具安装node.js的目录位置。 下面列出使用nvm进行管理的一些命令： # 打开cmd命令行，输入nvm查看是否安装成功 nvm list # 查看本地安装的所有版本 nvm list available # 查看所有可以下载安装的版本 nvm install 12.14 # 安装node.js 12.14版本 nvm use 12.14 # 启用node.js 12.14版本 nvm uninstall 12.15 # 卸载node.js 12.14版本 nvm arch # 显示node运行版本位数 nvm on # 启用nvm版本管理工具 nvm off # 关闭nvm版本管理工具 nvm version # 显示nvm版本 nvm root # 查看当前安装node.js使用的目录位置 nvm root [path] # 设置node.js安装的目录 2 npm的换源使用 安装.node.js时，会自动安装npm工具，但是默认安装源有时候下载速度不佳，所以可以设置使用淘宝的源。 2.1 方法一：安装cnpm 安装cnpm与npm共存，与npm有相同的功能与命令，自动使用淘宝的源，但是我尝试在nvm环境下无法使用cnpm，所以使用nvm安装node.js时，可以使用第二种方法。 # 安装cnpm npm install -g cnpm --registry=https://registry.npm.taobao.org 2.2 方法二：设置npm换源 在cmd中对npm进行换源 # 设置淘宝源 npm config set registry https://registry.npm.taobao.org # 设置默认源 npm config set registry https://registry.npmjs.org # 查看当前使用的源 npm config get registry","categories":[],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://jermainn.gitee.io/tags/node-js/"},{"name":"nvm","slug":"nvm","permalink":"http://jermainn.gitee.io/tags/nvm/"}]},{"title":"PPT模板网站推荐","slug":"PPT模板网站推荐","date":"2021-02-02T13:27:48.000Z","updated":"2021-02-02T13:27:48.000Z","comments":true,"path":"p/53034.html","link":"","permalink":"http://jermainn.gitee.io/p/53034.html","excerpt":"0 说明 PPT已经成为学习、工作、展示等不可或缺的工具； 对所述内容进行展示与总结，可以提高彼此交流的效率； 下面推荐一些PPT模板网站。","text":"0 说明 PPT已经成为学习、工作、展示等不可或缺的工具； 对所述内容进行展示与总结，可以提高彼此交流的效率； 下面推荐一些PPT模板网站。 1 PPT模板网站(1) OfficePLUS.cn (点击左侧网站名跳转) 网址：http://www.officeplus.cn/Template/Home.shtml 只需要登录自己的微软账户即可进行模板下载。 该网站为微软移动联新互联网服务有限公司运营，旨在为全球Office用户提供丰富的高品质原创PPT模板、Word实用文档、Excel数据图表及个性化定制服务，帮助用户随时随地提升效率，成就更多。 (2) 优品PPT 网址：https://www.ypppt.com/ 无需登录即可下载。 一个有情怀的免费PPT模板下载网站，是一家专注于分享高质量的免费PPT模板下载网站。包括PPT图表、PPT背景图片、PPT素材、PPT教程等各类PPT资源。致力于打造国内最大最权威的PPT下载一站式服务平台。 (3) PPT超级市场 网址：http://ppt.sotary.com/web/wxapp/index.html 无需登录 免费、优质、高端、安全，文件下载永不收费，会员体系永不推出 (4) 第1PPT 网址：http://www.1ppt.com/index.html 无需登录 第一PPT，成立于2005年5月，最早网站名为 PPT中国 是国内最早一批从事PPT模板下载服务的专业网站，为广大中国PowerPoint爱好者，提供PowerPoint模板下载、PowerPoint教程、PowerPoint素材等，建设中国PPT爱好者的网上家园，立志成为最大最权威的PPT中文网站 (5) PPT宝藏 网址：http://www.pptbz.com 无需登录 PPT宝藏是一家专注于分享高质量的PPT模板下载网站。包括PPT图表、PPT背景图片、PPT素材、PPT教程等各类PPT资源。致力于打造国内最大最权威的PPT下载一站式服务平台 (6) 51PPT模板 网址：http://www.51pptmoban.com 无需登录 本站所涉及提供的PPT模板、PPT图片、PPT图表等PPT素材大多来自PPT设计大师（PPT原创作者个人）授权发布作品、PPT设计公司授权免费作品、互联网免费共享资源精选以及部分原创作品，分享给PPT爱好者交流学习之用 2 素材网站(1) Iconfont-阿里巴巴矢量图标库 网址：https://www.iconfont.cn 矢量图、图标素材 需要登录 阿里妈妈MUX倾力打造的矢量图标管理、交流平台 (2) Apache Echarts 网址：https://echarts.apache.org/zh/index.html 图表素材 需要通过官网文档和示例快速入门使用 一个基于 JavaScript 的开源可视化图表库 3 结语 推荐网站如上所列，点击网站标题即可跳转。 最后，感谢各大网站平台的开创者、运营者和模板提供者为我们提供优质的PPT模板和素材。","categories":[],"tags":[{"name":"PPT模板","slug":"PPT模板","permalink":"http://jermainn.gitee.io/tags/PPT%E6%A8%A1%E6%9D%BF/"}]},{"title":"论文解读--Bidirectional Learning for Domain Adaptation of Semantic Segmentation","slug":"论文解读-Bidirectional-Learning-for-Domain-Adaptation-of-Semantic-Segmentation","date":"2021-01-29T01:22:36.000Z","updated":"2021-01-29T01:22:36.000Z","comments":true,"path":"p/2717.html","link":"","permalink":"http://jermainn.gitee.io/p/2717.html","excerpt":"0 说明 论文解读第二篇； 《Bidirectional Learning for Domain Adaptation of Semantic Segmentation》来自于CVPR 2019学术会议论文。","text":"0 说明 论文解读第二篇； 《Bidirectional Learning for Domain Adaptation of Semantic Segmentation》来自于CVPR 2019学术会议论文。 1 研究背景 人工标注、合成图像 在大型数据集上训练深度学习神经网络推动了图像语义分割的迅速发展，但是由于需要大量的人工、收集和手动标注具有像素级标签的图像，成本过高。 计算机图像学进展的推动下，可以产生具有标签的较为逼真的合成图像，但是与实际图像之间仍然存在域适应问题。 2 研究问题 无监督、域适应问题 由合成数据训练的模型面临的问题 域迁移：生成图像（源域）与真实图像（目标域）不匹配问题； 无标签：极端情况下目标域无可用标签； 应对 域适应着重解决域不匹配问题； 极端情况下则属于是无监督域适应问题。 3 创新点3.1 传统方法 传统方法是通过减小源域和目标域之间的均值或者方差度量标准，将源域的数据进行一定程度的变换，映射到目标域，但这种方法受限，且不易实现。 由于CycleGAN的提出，将语义分割分解为两个步骤，进一步减小了域间差异，语义分割自适应取得良好的发展。定义两个子网络，一个为域变换子网络（转换模型），另一个为分割子网络（分割自适应模型）。 先使用域变换子网络将源域转换到目标域，将源图像与变换图像喂给分割网络，并在分割网络中加入判别器，对输出的特征图判别源域与目标域的对齐程度，进一步优化网络。 优点：转换模型F有助于减少域间误差，进而更容易学得分割模型M，获得更好的性能。 缺点：分割模型极其依赖于转换模型，一旦转换实效，在下一阶段无能为力。 3.2 创新 双向学习系统：在CycleGAN的基础之上，双向学习形成一个闭环，迭代优化两个子网络； 自监督学习算法：用于分割自适应模型，在特征级别上逐步对齐源域和目标域，有利于分割网络实现域适应，进而有利于反向过程优化； 感知损失（perceptual loss ）：通过更新分割自适应模型来监督转换模型。 4 方法总结4.1 双向学习（Bidirectional Learning） 正向学习：translation-to-segmentation（$F-&gt;M$） 未完……首先简单介绍双向学习和自监督学习 然后放出网络结构图，通过算法解释网络结构图和算法，以及各个损失的作用。","categories":[],"tags":[{"name":"论文","slug":"论文","permalink":"http://jermainn.gitee.io/tags/%E8%AE%BA%E6%96%87/"},{"name":"语义分割","slug":"语义分割","permalink":"http://jermainn.gitee.io/tags/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/"},{"name":"域适应","slug":"域适应","permalink":"http://jermainn.gitee.io/tags/%E5%9F%9F%E9%80%82%E5%BA%94/"}]},{"title":"markdown使用","slug":"markdown使用","date":"2021-01-24T12:25:10.000Z","updated":"2021-01-24T12:25:10.000Z","comments":true,"path":"p/61039.html","link":"","permalink":"http://jermainn.gitee.io/p/61039.html","excerpt":"0 说明 markdown是一种轻量级的标记语言，非常方便进行文章排版，支持latex公式编辑显示。 可以算是一个程序员笔记的利器，支持许多的笔记软件，方便好用。","text":"0 说明 markdown是一种轻量级的标记语言，非常方便进行文章排版，支持latex公式编辑显示。 可以算是一个程序员笔记的利器，支持许多的笔记软件，方便好用。 1 资源推荐 基本教程 菜鸟教程：https://www.runoob.com/markdown/md-tutorial.html markdown软件 Typora 官网：https://typora.io/ 公式编辑 作业部落Markdown公式编辑手册： https://ericp.cn/cmd","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://jermainn.gitee.io/tags/markdown/"}]},{"title":"论文解读--Taking A Closer Look at Domain Shift: Category-level Adversaries for Semantics Consistent Domain Adaptation","slug":"论文解读-Taking-A-Closer-Look-at-Domain-Shift-Category-level-Adversaries-for-Semantics-Consistent-Domain-Adaptation","date":"2021-01-22T10:02:41.000Z","updated":"2021-01-22T10:02:41.000Z","comments":true,"path":"p/60859.html","link":"","permalink":"http://jermainn.gitee.io/p/60859.html","excerpt":"0 说明 由于毕业设计需要，进行相关论文的学习 论文解读第一篇: Taking A Closer Look at Domain Shift: Category-level Adversaries for Semantics Consistent Domain Adaptation","text":"0 说明 由于毕业设计需要，进行相关论文的学习 论文解读第一篇: Taking A Closer Look at Domain Shift: Category-level Adversaries for Semantics Consistent Domain Adaptation 1 研究背景 基于深度学习的语义分割方法是以像素级的人工标注为代价进行监督训练的，费时费力；借助计算机虚拟图像技术，几乎无成本地获得无限量自动标注数据，但虚拟图像和现实图像间存在严重的数据差异（域迁移），进而导致了训练的模型在真实图像上效果较差。 如下图所示，在图的第一行有虚拟图像训练得到的全卷积网络（FCN）在虚拟图像数据集上分割效果较好，但是当相同的网络模型迁移到真实数据（Cityscapes数据集）上之后，可以看出分割结果较差。 总结来说就是就是 1)像素级人工标注的代价和 2)域迁移的影响。 2 研究问题 全局体征分布、负迁移。 针对域迁移问题，常规的策略是通过对抗学习来调整源域Source与目标域Target之间的分布特征，但是这种全局特征分布（Marginal Distribution）对齐的策略，会产生语义不一致即负迁移（Negative Transfer）的问题。如下图所示： 橙色区域表示源域，绿色区域表示目标域，“+”和“-”号表示特征分布，曲线表示分类边界，灰色箭头大小表示损失的大小。由于对抗损失作用于全局特征，原先分类良好的“+”类别特征为了迎合全局对齐，会被映射到源域中的其他类别，导致语义不一致。 举例来说，目标域中汽车这一类，假设源域中车辆的特征是接近的，因此，在没有经过域适应算法之前，目标域汽车类也能够正确分割；然而，为了迎合全局特征对齐，目标域中的汽车类特征反而可能被错误映射到源域中的其他类别。 3 创新点3.1 传统方法传统方法广泛使用的是：在网络中加入一个域判别器Discriminator(D)，利用对抗训练机制，减少源域、目标域的不同分布差异，加强原始网络G在域间的泛化能力： (1) 利用源域的有标签数据进行有监督学 ℒ_{seg}(G)=E[ℓ(𝐺(𝑋_𝑆 ),𝑌_𝑆)]​ 其中$X_S$、$Y_S$为源数据及其对应标签，$G$为生成网络，即生成器损失为$X_S$通过网络$G$后与$Y_S$的损失的数学期望。 (2) 通过对抗学习，降低域判别器D的精度，对齐源域与目标域的特征分布 ℒ_{𝑎𝑑𝑣} (𝐺,𝐷)=−𝐸[𝑙𝑜𝑔(𝐷(𝐺(𝑋_𝑆 )))]−𝐸[𝑙𝑜𝑔(1−𝐷(𝐺(𝑋_𝑇 )))]​ 其中$X_T$为目标域数据，无标签。 3.2 创新语义级对抗学习域适应方法： 在传统的对抗学习框架基础之上加入了协同训练的思想，加入了两个互斥的分类器。 自适应对抗损失权重实现 当两个分类器预测一致时，该特征语义一致性较好，减少全局对齐策略对这些特征的影响； 反之，需要使用对抗损失，加大对齐力度进行特征对齐。 如上图所示，图(a)在第2节已经了解过，图(b)为自适应对抗损失示意图。使用了两个互斥的分类器，有两个曲线（分别边界线）。 可以看出，经过创新改进，判断出类别“+”起初便对齐较好，于是对抗损失较小，而类别“-”由于对齐较差，其对抗损失较差，进而起到了保护原来对齐较好特征不受影响，又促进对齐较差的特征对齐。 4 方法总结论文中提出于一级对抗网络(Category-Level Adversarial Network，CLAN) 4.1 网络结构语义级对抗网络由三部分组成：特征提取E、分类器C和判别器D，前两部分组成生成器G。 橙色线表示源域流，蓝色线表示目标域流。 其中两个互斥的分类器用于判断目标域的隐层特征是否已经达到局部对齐，在后续对抗训练时，网络依据互斥分了器产生的两个预测向量之差来判别网络所受反馈的对抗损失进行加权。 绿色箭头处使用余弦距离作为分类器损失，训练两个分类器预测产生不同的模型参数。 源域流通过两个互斥的分类器产生的预测作为源域的集成预测，一方面被标签监督产生分割损失，另一方面进入判别器D，作为源域样本。 目标域流同样由分类器产生的集成损失进入判别器，同时，求得两个分类器的预测差值，作为局部对齐程度的依据（local alignment score map），该距离与D所反馈的损失相乘得到语义级别的对抗损失。 4.2 损失函数模型损失函数 ℒ_{𝐶𝐿𝐴𝑁} (𝐺,𝐷)=ℒ_{𝑠𝑒𝑔} (𝐺)+𝜆_{𝑤𝑒𝑖𝑔ℎ𝑡} ℒ_{𝑤𝑒𝑖𝑔ℎ𝑡} (𝐺)+𝜆_{𝑎𝑑𝑣} ℒ_{𝑎𝑑𝑣} (𝐺,𝐷) 𝐺^∗,𝐷^∗=arg⁡𝑚𝑖𝑛_𝐺 𝑚𝑎𝑥_𝐷 ℒ_{𝐶𝐿𝐴𝑁} (𝐺,𝐷)训练目标，交替优化G和D，直至总损失收敛为止。 分割损失：若给定形状为$3\\times H \\times W$的图像和形状为$C \\times H \\times W$的标签图，其中$C$是语义类别的数量 ℒ_{𝑠𝑒𝑔} (𝐺)=\\sum _{i=1}^{H \\times W} \\sum _{j=1}^C -y_{ic}\\log p_{ic}​ 其中，$p_{ic}$ 表示像素$i$为$C$类的概率，$y_{ic}$表示像素$i$为$C$类的真值(1 or 0)。 ​ 即分类器对各个像素分类预测值的负对数与真值的乘积的累加和。 分类器损失： ℒ_{𝑤𝑒𝑖𝑔ℎ𝑡} (𝐺)= \\frac {\\vec{w_1} \\cdot \\vec{w_2}}{\\| \\vec{w_1} \\|\\|\\vec{w_2}\\|}​ 即两个分类器网络中参数的余弦距离。 对抗损失： ℒ_{𝑎𝑑𝑣} (𝐺,𝐷)=−𝐸\\left[\\log (𝐷(𝐺(𝑋_𝑆 ))) \\right]−𝐸\\left[(𝜆_{𝑙𝑜𝑐𝑎𝑙} 𝑀(𝑝^{(1)},𝑝^{(2)})+𝜖)\\log (1−𝐷(𝐺(𝑋_𝑇 )))\\right]​ 其中，$𝑀(𝑝^{(1)},𝑝^{(2)})$表示两个分类器输出向量的余弦距离。 ​ 即在传统对抗损失上加权了由两个分类器的预测差异权重。 5 实验总结5.1 语义分割可视化 CLAN与传统对抗网络（TAN）的对比 重点关注橙色框中的电线杆和交通标志。 图(e、f、g)为高维特征通过非线性降维算法(t-SNE)到二维空间（仅显示4个相关类，即建筑物为蓝色、交通标志为橙色、杆子为灰色、植被为绿色） 上图表明，有些类别特征在没有进行域迁移之前，就已经是对齐的。传统的全局域适应方法反而会破坏这种语义一致性，造成域迁移；而本文提出的语义级对抗网络降低了全局对齐对这些类的影响。 特征簇中心距离 上图展示隐层隐层空间源域与目标域之间同语义特征簇的中心距离，该距离越小，说明两个域之间的语义对齐越好。 分割效果 各列为：目标域图、无自适应分割效果、CLAN分割效果、标准效果图。 5.2 总结 论文提出的语义级对抗学习域适应网络(CLAN)，使用协同训练结合对抗学习的设计，旨在解决无监督域自适应(UDA)语义分割中，由全局特征对齐所引起的语义不一致问题，有效地防止了负迁移。 在两个域适应语义分割任务，即GTA5 -&gt; Cityscapes 和 SYNTHIA -&gt; Cityscapes 上进行了实验验证，以及实际的语义分割效果中都取得了较好的实验结果。具有良好的应用前景。 6 相关链接 论文原文 程序源码 CVPR2019 Oral Presentation: Taking A Closer Look at Domain Shift (function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"https://cdn.jsdelivr.net/gh/jermainliu/cdn@1.0/videos/CVPR2019%20Oral%20Presentation%20Taking%20A%20Closer%20Look%20at%20-%201.Oral(Av53561336,P1).mp4\",\"pic\":\"https://cdn.jsdelivr.net/gh/jermainliu/cdn/images/CVPR2019%20Oral%20Presentation%20Taking%20A%20Closer%20Look-Oral.jpg\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()","categories":[],"tags":[{"name":"论文","slug":"论文","permalink":"http://jermainn.gitee.io/tags/%E8%AE%BA%E6%96%87/"},{"name":"语义分割","slug":"语义分割","permalink":"http://jermainn.gitee.io/tags/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/"},{"name":"深度学习","slug":"深度学习","permalink":"http://jermainn.gitee.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]},{"title":"Markdown中公式的使用","slug":"Markdown中公式的使用","date":"2020-03-10T12:24:04.000Z","updated":"2020-03-10T12:24:04.000Z","comments":true,"path":"p/23853.html","link":"","permalink":"http://jermainn.gitee.io/p/23853.html","excerpt":"0. 说明 学习中使用Markdown记笔记，少不了使用公式； 本次主要说明基本公式的使用，之后会继续更新。","text":"0. 说明 学习中使用Markdown记笔记，少不了使用公式； 本次主要说明基本公式的使用，之后会继续更新。 1. 基本公式使用1.1 插入公式 数学公式有两种：行中公式和独立公式。行中公式与文中其他文字混编，独立公式单独成行。 行中公式： $数学公式$ 独立公式： $$独立公式$$ 自动编号的公式可以用如下方法表示： \\begin{equation} 数学公式 \\label{eq:当前公式名} \\end{equation} 自动编号后的公式可在全文任意处使用\\eqref{eq:公式名}语句引用。 例子1： $\\text {行中公式示例：} J_\\alpha(x) = \\sum_{m=0}^\\infty \\frac{(-1)^m}{m! \\Gamma (m + \\alpha + 1)} {\\left({ \\frac {x}{2} }\\right)}^{2m + \\alpha}$ 显示：$ \\text {行中公式示例：} J_\\alpha(x) = \\sum_{m=0}^\\infty \\frac{(-1)^m}{m! \\Gamma (m + \\alpha + 1)} {\\left({ \\frac {x}{2} }\\right)}^{2m + \\alpha} $ 例子2： $$\\text {独立公式示例：} J_\\alpha(x) = \\sum_{m=0}^\\infty \\frac{(-1)^m}{m! \\Gamma (m + \\alpha + 1)} {\\left({ \\frac {x}{2} }\\right)}^{2m + \\alpha}$$ 显示： \\text {独立公式：} J_\\alpha(x) = \\sum_{m=0}^\\infty \\frac{(-1)^m}{m! \\Gamma (m + \\alpha + 1)} {\\left({ \\frac {x}{2} }\\right)}^{2m + \\alpha} 1.2 输入上下标 ^表示上标，_表示下标。如果上下标的内容多于一个字符，需要使用{}将这些内容括成一个整体。上下标可以嵌套，也可以同时使用。 例子： $$x^{y^z}=(1+{\\rm e}^x)^{-2xy^w}$$ 显示： x^{y^z}=(1+{\\rm e}^x)^{-2xy^w}另外，如果要在左右两边都有是上下标，可以用\\sideset命令。 例子： $$\\sideset{^1_2}{^3_4} x$$ 显示： \\sideset{^1_2}{^3_4} x 1.3 输入括号和分隔符 ()、[]和|表示符号本身，使用\\{\\}来表示{}。当要显示大号的括号或分隔符时，要用\\left和\\right命令。 一些特殊的括号： 输入 显示 输入 显示 \\langle $\\langle$ \\rangle $\\rangle$ \\lceil $\\lceil$ \\rceil $\\rceil$ \\lfloor $\\lfloor$ \\rfloor $\\rfloor$ \\lbrace $\\lbrace$ \\rbrace $\\rbrace$ 例子1： $$f(x,y,z)=3y^2z \\left( 3+\\frac{7x+5}{1+y^2} \\right)$$ 显示： f(x,y,z)=3y^2z \\left( 3+\\frac{7x+5}{1+y^2} \\right)有时需要用\\left.或者\\right.进行匹配而不显示本身。 例子2： $$\\left. \\frac{du}{dx} \\right| _{x=0}$$ 显示： \\left. \\frac{du}{dx} \\right| _{x=0} 1.4 输入分数 通常使用\\frac{分子}{分母}命令产生一个分数，分数可以嵌套。 当分子（分母）只有一个字符时，可以不用花括号。 如果分式很复杂，也可以使用分子 \\over 分母命令，此时分数仅有一层。 例子： $$\\frac{a-1}{b-1} \\quad and \\quad {a+1\\over b+1}$$ 显示： \\frac{a-1}{b-1} \\quad and \\quad {a+1\\over b+1} 1.5 输入开方 使用\\sqrt{根指数，省略时默认为2}{被开方数}命令输入开方。 例子： $$\\sqrt{2} \\quad and \\quad \\sqrt{n}{3}$$ 显示： \\sqrt{2} \\quad and \\quad \\sqrt{n}{3} 1.6 输入省略号 常见的省略号有两种，\\ldots表示与文本底线对齐的省略号，\\cdots表示与文本中线对齐的省略号。 例子： $$f(x_1,x_2,\\underbrace{\\ldots}_{\\rm ldots}, x_n) = x_1^2 + x_2^2 \\underbrace{\\cdots}_{rm \\cdots} + x_n^2$$ 显示： f(x_1,x_2,\\underbrace{\\ldots}_{\\rm ldots}, x_n) = x_1^2 + x_2^2 \\underbrace{\\cdots}_{rm \\cdots} + x_n^2 1.7 输入矢量 使用\\vec{矢量}来自动产生一个矢量。也可以使用\\overrightarrow等命令自定义字母上方的符号。 例子1： $$\\vec{a} \\cdot \\vec(b)=0$$ 显示： \\vec{a} \\cdot \\vec(b)=0 例子2： $$\\overleftarrow{xy} \\quad and \\quad \\overleftrightarrow{xy} \\quad and \\quad \\overrightarrow(xy)$$ 显示： \\overleftarrow{xy} \\quad and \\quad \\overleftrightarrow{xy} \\quad and \\quad \\overrightarrow(xy) 1.8 输入积分 使用\\int_积分下限^积分上限 {被积表达式}来输入一个积分。 例子： $$\\int_0^1 {x^2} \\,{\\rm d}x$$ 显示： \\int_0^1 {x^2} \\,{\\rm d}x本式中\\,和{\\rm d}部分可以省略，但建议加入，能使式子更美观。 1.9 输入极限符号 使用\\lim_{变量 \\to 表达式} 表达式来输入一个极限。如有需求，可以更改\\to符号至任意符号。 例子： $$\\lim_{n \\to +\\infty} \\frac{1}{n(n+1)} \\quad and \\quad \\lim_{x\\leftarrow{示例}} \\frac{1}{n(n+1)}$$ 显示： \\lim_{n \\to +\\infty} \\frac{1}{n(n+1)} \\quad and \\quad \\lim_{x\\leftarrow{示例}} \\frac{1}{n(n+1)} 1.10 输入累加、累乘运算 使用\\sum_{下标表达式}^{上标表达式} {累加表达式}来输入一个累加。 与之类似，使用\\prod、\\bigcup、\\bigcap来分别输入累乘、并集和交集。 此符号在行内显示时上下标表达式将会移至右上角和右下角。 例子： $$\\sum_{i=1}^n \\frac{1}{i^2} \\quad and \\quad \\prod_{i=1}^n \\frac{1}{i^2} \\quad and \\quad \\bigcup_{i=1}^{2} R$$ 显示： \\sum_{i=1}^n \\frac{1}{i^2} \\quad and \\quad \\prod_{i=1}^n \\frac{1}{i^2} \\quad and \\quad \\bigcup_{i=1}^{2} R","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://jermainn.gitee.io/tags/Markdown/"},{"name":"公式","slug":"公式","permalink":"http://jermainn.gitee.io/tags/%E5%85%AC%E5%BC%8F/"}]},{"title":"Hexo主题添加网页访问计数功能","slug":"Hexo主题添加网页访问计数功能","date":"2020-03-09T14:24:29.000Z","updated":"2020-03-09T14:24:29.000Z","comments":true,"path":"p/55524.html","link":"","permalink":"http://jermainn.gitee.io/p/55524.html","excerpt":"0. 说明 添加不蒜子访问计数 以Hexo的yilia主题为例子","text":"0. 说明 添加不蒜子访问计数 以Hexo的yilia主题为例子 以Hexo目录作为说明的基点 1. 配置文件修改 在./themes/yilia/_config.yml中添加属性 本身yilia主题没有在_config.yml中保留不算子的属性，所有直接在末尾追加就行# 开启不算子访问统计 busuanzi: enable: true 2. 添加不蒜子插件 添加统计数据显示以及不蒜子网站访问脚本 在./themes/yilia/layout/_partla/footer.ejs末尾&lt;/footer&gt;与其上面的&lt;/div&gt;之间插入下面代码： &lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable){ %&gt; &lt;!-- 不蒜子统计 --&gt; &lt;span id=\"busuanzi_container_site_pv\"&gt; 本站总访问量&lt;span id=\"busuanzi_value_site_pv\"&gt;&lt;/span&gt;次 &lt;/span&gt; &lt;span class=\"post-meta-divider\"&gt; | &lt;/span&gt; &lt;span id=\"busuanzi_container_site_uv\"&gt; 本站访客数&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;人次 &lt;/span&gt; &lt;script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"&gt; &lt;/script&gt; &lt;% } %&gt; 3. 资源 不蒜子本人官网链接：不蒜子 | 不如","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://jermainn.gitee.io/tags/Hexo/"},{"name":"不蒜子","slug":"不蒜子","permalink":"http://jermainn.gitee.io/tags/%E4%B8%8D%E8%92%9C%E5%AD%90/"}]},{"title":"逻辑斯蒂回归与Softmax回归的极大似然估计","slug":"逻辑斯蒂回归与Softmax回归的极大似然估计","date":"2020-03-08T14:56:46.000Z","updated":"2020-03-08T14:56:46.000Z","comments":true,"path":"p/11737.html","link":"","permalink":"http://jermainn.gitee.io/p/11737.html","excerpt":"0. 说明 使用极大似然估计(i.i.d independent and identically distributed) 推导逻辑斯蒂回归和Softmax回归用于分类问题的目标函数","text":"0. 说明 使用极大似然估计(i.i.d independent and identically distributed) 推导逻辑斯蒂回归和Softmax回归用于分类问题的目标函数 1. 逻辑斯蒂回归的极大似然估计 线性回归的任务是预测，单也可用来分类 伯努利分布| $y_n$ | 1 | 0 || :—-: | :———————-: | :———————-: || $p_n$ | $p^1(x_n;\\omega)$ | $p^2(x_n;\\omega)$ | 其中 p^1(x_n;\\omega)+p^2(x_n;\\omega)=1p^1(x_n;\\omega)=\\frac{e^{\\omega^Tx_n}}{1+e^{\\omega^Tx_n}}p^2(x_n;\\omega)=\\frac{1}{1+e^{\\omega^Tx_n}} 极大似然估计(i.i.d)p(x_1,x_2,\\cdots,x_N;\\omega)=\\prod_{n=1}^{N}{[p^1(x_n;\\omega)]^y_n [p^0(x_n;\\omega)]^{1-y_n}}max_\\omega p(x_1,x_2,\\cdots,x_N;\\omega) \\iff min_\\omega [ -\\ln{p(x_1,x_2,\\cdots,x_N;\\omega)}\\large] 目标函数 \\begin{align} L(\\omega) & =-\\ln{p(x_1,x_2,\\cdots,x_N;\\omega)} \\\\ & =-\\sum_{n=1}^{N}{[y_n \\ln{p^1(x_n;\\omega)}+(1-y_N)\\ln{p^0(x_n;\\omega)}]} \\\\ & =-\\sum_{n=1}^{N}{\\lbrace y_n[\\omega^Tx+\\ln{(1+exp(\\omega^Tx))}]+(1-y_n)\\ln{(1+exp(\\omega^Tx))} \\rbrace} \\\\ & =\\sum_{n=1}^{N}{[-y_n\\omega^Tx+\\ln{(1+exp(\\omega^Tx))}]} \\\\ \\end{align} 2. Softmax回归的极大似然估计 多类分类 概率分布列 | $y_n$ | 1 | 2 | $\\cdots$ | C || :—-: | :————————-: | :————————-: | :———: | :————————-: || $p_n$ | $p^1(x_n;\\omega_1)$ | $p^2(x_n;\\omega_2)$ | $\\cdots$ | $p^C(x_n;\\omega_C)$ | 其中 \\omega^T= \\begin{bmatrix} \\omega_1^T \\\\ \\omega_2^T \\\\ \\vdots \\\\ \\omega_C^T \\\\ \\end{bmatrix}= \\begin{bmatrix} \\omega_{1,1} & \\omega_{1,2} & \\cdots & \\omega_{1,N} \\\\ \\omega_{2,1} & \\omega_{2,2} & \\cdots & \\omega_{2,N} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ \\omega_{C,1} & \\omega_{C,2} \\cdots & \\omega_{C,N} \\\\ \\end{bmatrix}\\sum_{c=1}^{C}p^c(x_n;\\omega_c)=1p^c(x_n;\\omega_c)=\\frac{e^{\\omega_c^Tx_n}}{\\sum_{k=1}^{C}e^{\\omega_k^Tx_n}} 极大似然估计(i.i.d) \\text{引入示性函数} \\quad I(y_n=c)= \\begin{cases} 1, & y_n=c \\\\ 0, & y_n\\neq c \\\\ \\end{cases} p(x_1,x_2,\\cdots,x_N;\\omega)=\\prod_{n=1}^{N}\\prod_{c=1}^{C}{\\large[p^c(x_n;\\omega_c)]^{I(y_n)}}max_\\omega p(x_1,x_2,\\cdots,x_N;\\omega) \\iff min_\\omega[-\\ln p(x_1,x_2,\\cdots,x_N;\\omega)] 目标函数 \\begin{align} L(\\omega) & =-\\ln p(x_1,x_2,\\cdots,x_N;\\omega) \\\\ & =-\\sum_{n=1}^{N}\\sum_{c=1}^{C}{I(y_n)\\ln p^c(x_n;\\omega_c)} \\\\ & =-\\sum_{n=1}^{N}\\sum_{c=1}^{C}{I(y_n)\\frac{e^{\\omega_c^Tx_n}}{\\sum_{k=1}^{C}e^{\\omega_k^Tx_n}}} \\\\ \\end{align}令y_n=[\\delta(y_n=1),\\delta(y_n=2),\\cdots,\\delta(y_n=C)]h(\\omega^Tx_n)=\\frac{e^{\\omega^Tx}}{\\large{1}^T e^{\\omega^Tx}}=\\frac{e^{\\omega_c^Tx_n}}{\\sum_{k=1}^{C}e^{\\omega_k^Tx_n}}则有\\sum_{c=1}^{C}{I(y_n)\\frac{e^{\\omega_c^Tx_n}}{\\sum_{k=1}^{C}e^{\\omega_k^Tx_n}}}=y_n^T \\ln h(\\omega^Tx_n)目标函数化简为 L(\\omega)=-\\sum_{n=1}^{N}{y_n^T\\ln h(\\omega^Tx_n)} 交叉熵损失函数(Cross Entropy Loss)在目标函数的基础上乘以$\\frac{1}{N}$J(\\omega)=-\\frac{1}{N}\\sum_{n=1}^{N}{y_n^T\\ln h(\\omega^Tx_n)}","categories":[],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"http://jermainn.gitee.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"极大似然估计","slug":"极大似然估计","permalink":"http://jermainn.gitee.io/tags/%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1/"}]},{"title":"Hexo博客添加字数统计和阅读时长","slug":"Hexo博客添加字数统计和阅读时长","date":"2020-03-07T15:32:36.000Z","updated":"2020-03-07T15:32:36.000Z","comments":true,"path":"p/25241.html","link":"","permalink":"http://jermainn.gitee.io/p/25241.html","excerpt":"0. 说明hexo-wordcount 插件提供了字数统计和阅读时长预计功能，项目地址为：hexo-wordcount","text":"0. 说明hexo-wordcount 插件提供了字数统计和阅读时长预计功能，项目地址为：hexo-wordcount 下面均以Hexo博客根目录为基点。 1. 安装hexo-wordcount字数和阅读时长统计插件 进入博客根目录，使用npm安装hexo-wordcount插件 npm install hexo-wordcount --save 加—save参数可以将安装信息写入package.json，方便以后可能需要再次安装。 安装完成之后，可以在hexo根目录的node_modules文件夹中找到hexo_wordcount文件夹，里面的index.js就是插件的全部内容。 2. 添加字数和阅读时长数据 在文章的标题下方添加字数统计和时长估计数据 在目录 ./themes/yilia/layout/_partial/post/ 创建新文件 wordcount.ejs，文件内容如下： 字数统计: 字 &nbsp; | &nbsp; 阅读时长: 分 然后，在./themes/yilia/layout/_partial/artivle.ejs中修改文件内容为： ```html &lt;% if (post.link || post.title){ %&gt; &lt;header class=\"article-header\"&gt; &lt;%- partial('post/title', {class_name: 'article-title'}) %&gt; &lt;% if (!post.noDate){ %&gt; &lt;%- partial('post/date', {class_name: 'archive-article-date', date_format: null}) %&gt; &lt;!--添加字数统计位置--&gt; &lt;% if(theme.word_count &amp;&amp; !post.no_word_count){%&gt; &lt;%- partial('post/wordcount') %&gt; &lt;% } %&gt; &lt;% } %&gt; ``` &gt; 注意：并非在文件末尾追加，而是在文件中查找到该部分，添加中间汉字提示的部分 &gt; &gt; tips: 由于文件中内容较多，可以使用一些编译器的查找功能 --- ## 3. 开启功能 - 在`./themes/yilia/_config.yml`添加如下内容： ``` # 是否开启字数统计 # 不需要使用，直接设置值为`false`，或者注释掉 word_count: true ``` --- 效果如图所示： {% asset_img pic2.1.png %}","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://jermainn.gitee.io/tags/Hexo/"},{"name":"wordcount","slug":"wordcount","permalink":"http://jermainn.gitee.io/tags/wordcount/"}]},{"title":"使用Hexo部署一个属于自己的博客","slug":"使用Hexo部署一个属于自己的博客","date":"2020-03-05T14:39:09.000Z","updated":"2020-03-05T14:39:09.000Z","comments":true,"path":"p/60899.html","link":"","permalink":"http://jermainn.gitee.io/p/60899.html","excerpt":"0. 说明 本次配置使用的环境为：deepin 15.11桌面版 其他操作系统类似","text":"0. 说明 本次配置使用的环境为：deepin 15.11桌面版 其他操作系统类似 1. 准备工作Node.js环境包 因为Hexo是基于Node.js的第三方模块，所以缺少Node.js不可。访问Node.js官网下载合适自己系统的Node.js安装包。此时最新版本为v13.9.0，我使用的平台为Linux Binaries (x64) 创建安装路径，并进行解压(我们以/usr/local/lib/nodejs文件夹为例)sudo mkdir -p /usr/local/lib/nodejs # 创建解压安装目录 sudo tar -xJvf node-v13.9.0-linux-x64.tar.xz -C /usr/local/lib/nodejs # 将安装包解压安装 添加换将变量，在～/.bashrc文件后追加export PATH=$PATH:/usr/local/lib/nodejs/node-v13.9.0-linux-x64/bin # 或者 export PATH=/usr/local/lib/nodejs/node-v13.9.0-linux-x64/bin:$PATH # 或者直接使用命令添加 echo 'export PATH=$PATH:/usr/local/lib/nodejs/node-v13.9.0-linux-x64/bin\"' &gt;&gt; ~/.bashrc 测试安装node -v npm version npx -v Git工具包 在bash中使用apt-get方法进行安装即可sudo apt-get install git-core 测试安装git --version 2. 开始工作安装Hexo Hexo是基于Node.js的第三方模块，所有我们需要对其进行单独安装，使用npm安装Hexonpm install -g hexo-cli # 对于熟悉npm的进阶用户，可以仅局部安装Hexo包 # npm install hexo 自动安装到Nodejs目录中,也无需添加环境变量，只有上一步安装Node.js中添加了即可 测试hexo -v 建站 安装Hexo完成后，清执行系列命令，Hexo将会在指定文件夹中新建所需要的文件# 我以加家目录下创建Hexo文件夹为例进行 cd ~ # 进入家目录 sudo mkdir Hexo # 创建Hexo目录 hexo init ./Hexo # 初始化Hexo目录 cd ./Hexo npm install 新建完成后，指定文件夹的目录如下：. ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes _config.yml-网站的配置 | Hexo信息，可以在此配置大部分的参数package.json 应用程序的信息。EJS，Stylus和Markdown renderer已默认安装，可以自由移除package.json { \"name\": \"hexo-site\", \"version\": \"0.0.0\", \"private\": true, \"hexo\": { \"version\": \"\" }, \"dependencies\": { \"hexo\": \"^3.8.0\", \"hexo-generator-archive\": \"^0.1.5\", \"hexo-generator-category\": \"^0.1.3\", \"hexo-generator-index\": \"^0.2.1\", \"hexo-generator-tag\": \"^0.2.0\", \"hexo-renderer-ejs\": \"^0.3.1\", \"hexo-renderer-stylus\": \"^0.3.3\", \"hexo-renderer-marked\": \"^0.3.2\", \"hexo-server\": \"^0.3.3\" } } scaffolds 写作 | Hexo模板文件夹。当新建文章时，Hexo会根据scaffold来建立文件。 Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您需改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。 source 资源文件夹是存放用户资源的地方。除_posts文件夹之外，开头命名为_（下划线）的文件/文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并防盗public文件夹，而其他文件会被拷贝过去。 themes 主题 | Hexo文件夹。Hexo会根据主题来生成静态网页。 3. 基本操作服务器hexo-server Hexo 3.0 把服务器独立成了个别模块，必须先安装hexo-server才能使用npm install hexo-server --save 安装完成后，输入以下命令以启动服务器，您的网站会在http://localhost:4000 下启动。在服务器启动期间，Hexo会监视文件变动并自动更新，您无需重启服务器hexo server 如果想要更改端口，或是在执行时遇到了EADDRINUSE错误，可以在执行时使用-p选项指定其他端口，如下：hexo server -p 5000 静态模式 在静态模式下，服务器只处理public文件夹内的文件，而不会处理文件变动，在执行时，你应该先自动执行hexo generate，此模式通常用于生产环境（production mode）下。hexo server -s 自定义IP 服务器默认运行在0.0.0.0，你可以覆盖默认的IP地址，如下：hexo server -i 192.168.1.1 使用这个参数后，你就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的127.0.0.1外，通常还有一个192.168..的局域网IP，如果像上面那样使用-i参数，就不能用127.0.0.1来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为-i参数的值，那么就无法通过公网来访问站点。 写博客 执行下列命令来创建一片新的文章或者新的页面# hexo new [layout] &lt;title&gt; hexo new post “my_first_blog” 可以在命令中指定文章的布局(layout)，默认为post，可以通过修改_config.yml中的default_layout参数来指定默认布局。 在./source/_posts/中产生新的.md文件 通过终端或者编辑器进行写入内容，网站会自动更新 其他有关命令hexo clean # 清除缓存文件(db.json)和已生成的静态文件(public) hexo generate # hexo g 生成静态文件 hexo list &lt;type&gt; # 列出网站资料 4. 部署（github）github仓库 登录github仓库 在右上角点击“+”号，点击“New repository” 用户部署个人博客的github仓库的命令必须为 github用户名.github.io；简单写一下仓库的描述，可以不写；下面选择public，公开的，私人的需要付费，最后点击Create repository创建完成 显示如下： 使用上面的http 进行git部署 进入创建的Hexo博客目录，执行下列命令安装git插件npm install --save hexo-deployer-git 修改配置文件_config.yml，使用nano、或者使用vim编辑nano _config.yml 下滑至最后，在# Deployment部分进行修改添加# Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: https://github.com/JermainLiu/JermainLiu.github.io.git # 刚刚在上面的创建的仓库后出现的http地址 branch: master # 不写默认为master Ctrl+o，Enter，保存，Ctrl+x退出编辑 配置git信息，用自己的信息替换下面引号中的内容。如果之前配置过git config的话，跳过git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" 执行部署命令hexo deploy 在这个过程中会提示你输入github账户昵称和密码。 完成之后，刷新刚刚新建的github仓库，文件已经部署进github中，在地址栏访问你的仓库名称“username.github.io”即可访问博客。 本文总阅读量 次&lt;/span&gt;","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://jermainn.gitee.io/tags/Hexo/"}]},{"title":"First Blog","slug":"First-Blog","date":"2020-03-04T15:41:29.000Z","updated":"2020-03-04T15:41:29.000Z","comments":true,"path":"p/45015.html","link":"","permalink":"http://jermainn.gitee.io/p/45015.html","excerpt":"自己的博客基本搭建完成，接下来进行部署即可。","text":"自己的博客基本搭建完成，接下来进行部署即可。 第一次使用这种博客来写东西，心情还是很激动的呢！！","categories":[],"tags":[]}]